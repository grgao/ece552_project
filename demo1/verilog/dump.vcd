$date
	Wed Oct 23 00:21:00 2024
$end
$version
	ModelSim Version 2020.1
$end
$timescale
	1ps
$end

$scope module proc_hier_bench $end
$var wire 1 ! PC [15] $end
$var wire 1 " PC [14] $end
$var wire 1 # PC [13] $end
$var wire 1 $ PC [12] $end
$var wire 1 % PC [11] $end
$var wire 1 & PC [10] $end
$var wire 1 ' PC [9] $end
$var wire 1 ( PC [8] $end
$var wire 1 ) PC [7] $end
$var wire 1 * PC [6] $end
$var wire 1 + PC [5] $end
$var wire 1 , PC [4] $end
$var wire 1 - PC [3] $end
$var wire 1 . PC [2] $end
$var wire 1 / PC [1] $end
$var wire 1 0 PC [0] $end
$var wire 1 1 Inst [15] $end
$var wire 1 2 Inst [14] $end
$var wire 1 3 Inst [13] $end
$var wire 1 4 Inst [12] $end
$var wire 1 5 Inst [11] $end
$var wire 1 6 Inst [10] $end
$var wire 1 7 Inst [9] $end
$var wire 1 8 Inst [8] $end
$var wire 1 9 Inst [7] $end
$var wire 1 : Inst [6] $end
$var wire 1 ; Inst [5] $end
$var wire 1 < Inst [4] $end
$var wire 1 = Inst [3] $end
$var wire 1 > Inst [2] $end
$var wire 1 ? Inst [1] $end
$var wire 1 @ Inst [0] $end
$var wire 1 A RegWrite $end
$var wire 1 B WriteRegister [2] $end
$var wire 1 C WriteRegister [1] $end
$var wire 1 D WriteRegister [0] $end
$var wire 1 E WriteData [15] $end
$var wire 1 F WriteData [14] $end
$var wire 1 G WriteData [13] $end
$var wire 1 H WriteData [12] $end
$var wire 1 I WriteData [11] $end
$var wire 1 J WriteData [10] $end
$var wire 1 K WriteData [9] $end
$var wire 1 L WriteData [8] $end
$var wire 1 M WriteData [7] $end
$var wire 1 N WriteData [6] $end
$var wire 1 O WriteData [5] $end
$var wire 1 P WriteData [4] $end
$var wire 1 Q WriteData [3] $end
$var wire 1 R WriteData [2] $end
$var wire 1 S WriteData [1] $end
$var wire 1 T WriteData [0] $end
$var wire 1 U MemWrite $end
$var wire 1 V MemRead $end
$var wire 1 W MemAddress [15] $end
$var wire 1 X MemAddress [14] $end
$var wire 1 Y MemAddress [13] $end
$var wire 1 Z MemAddress [12] $end
$var wire 1 [ MemAddress [11] $end
$var wire 1 \ MemAddress [10] $end
$var wire 1 ] MemAddress [9] $end
$var wire 1 ^ MemAddress [8] $end
$var wire 1 _ MemAddress [7] $end
$var wire 1 ` MemAddress [6] $end
$var wire 1 a MemAddress [5] $end
$var wire 1 b MemAddress [4] $end
$var wire 1 c MemAddress [3] $end
$var wire 1 d MemAddress [2] $end
$var wire 1 e MemAddress [1] $end
$var wire 1 f MemAddress [0] $end
$var wire 1 g MemData [15] $end
$var wire 1 h MemData [14] $end
$var wire 1 i MemData [13] $end
$var wire 1 j MemData [12] $end
$var wire 1 k MemData [11] $end
$var wire 1 l MemData [10] $end
$var wire 1 m MemData [9] $end
$var wire 1 n MemData [8] $end
$var wire 1 o MemData [7] $end
$var wire 1 p MemData [6] $end
$var wire 1 q MemData [5] $end
$var wire 1 r MemData [4] $end
$var wire 1 s MemData [3] $end
$var wire 1 t MemData [2] $end
$var wire 1 u MemData [1] $end
$var wire 1 v MemData [0] $end
$var wire 1 w Halt $end
$var integer 32 x inst_count $end
$var integer 32 y trace_file $end
$var integer 32 z sim_log_file $end

$scope module DUT $end
$var wire 1 { clk $end
$var wire 1 | err $end
$var wire 1 } rst $end

$scope module c0 $end
$var reg 1 ~ clk $end
$var reg 1 !! rst $end
$var wire 1 | err $end
$var integer 32 "! cycle_count $end
$upscope $end

$scope module p0 $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 #! err $end
$var wire 1 $! instruction_f_d [15] $end
$var wire 1 %! instruction_f_d [14] $end
$var wire 1 &! instruction_f_d [13] $end
$var wire 1 '! instruction_f_d [12] $end
$var wire 1 (! instruction_f_d [11] $end
$var wire 1 )! instruction_f_d [10] $end
$var wire 1 *! instruction_f_d [9] $end
$var wire 1 +! instruction_f_d [8] $end
$var wire 1 ,! instruction_f_d [7] $end
$var wire 1 -! instruction_f_d [6] $end
$var wire 1 .! instruction_f_d [5] $end
$var wire 1 /! instruction_f_d [4] $end
$var wire 1 0! instruction_f_d [3] $end
$var wire 1 1! instruction_f_d [2] $end
$var wire 1 2! instruction_f_d [1] $end
$var wire 1 3! instruction_f_d [0] $end
$var wire 1 4! branch_pc [15] $end
$var wire 1 5! branch_pc [14] $end
$var wire 1 6! branch_pc [13] $end
$var wire 1 7! branch_pc [12] $end
$var wire 1 8! branch_pc [11] $end
$var wire 1 9! branch_pc [10] $end
$var wire 1 :! branch_pc [9] $end
$var wire 1 ;! branch_pc [8] $end
$var wire 1 <! branch_pc [7] $end
$var wire 1 =! branch_pc [6] $end
$var wire 1 >! branch_pc [5] $end
$var wire 1 ?! branch_pc [4] $end
$var wire 1 @! branch_pc [3] $end
$var wire 1 A! branch_pc [2] $end
$var wire 1 B! branch_pc [1] $end
$var wire 1 C! branch_pc [0] $end
$var wire 1 D! pc_d_f [15] $end
$var wire 1 E! pc_d_f [14] $end
$var wire 1 F! pc_d_f [13] $end
$var wire 1 G! pc_d_f [12] $end
$var wire 1 H! pc_d_f [11] $end
$var wire 1 I! pc_d_f [10] $end
$var wire 1 J! pc_d_f [9] $end
$var wire 1 K! pc_d_f [8] $end
$var wire 1 L! pc_d_f [7] $end
$var wire 1 M! pc_d_f [6] $end
$var wire 1 N! pc_d_f [5] $end
$var wire 1 O! pc_d_f [4] $end
$var wire 1 P! pc_d_f [3] $end
$var wire 1 Q! pc_d_f [2] $end
$var wire 1 R! pc_d_f [1] $end
$var wire 1 S! pc_d_f [0] $end
$var wire 1 T! wbdata_x_d [15] $end
$var wire 1 U! wbdata_x_d [14] $end
$var wire 1 V! wbdata_x_d [13] $end
$var wire 1 W! wbdata_x_d [12] $end
$var wire 1 X! wbdata_x_d [11] $end
$var wire 1 Y! wbdata_x_d [10] $end
$var wire 1 Z! wbdata_x_d [9] $end
$var wire 1 [! wbdata_x_d [8] $end
$var wire 1 \! wbdata_x_d [7] $end
$var wire 1 ]! wbdata_x_d [6] $end
$var wire 1 ^! wbdata_x_d [5] $end
$var wire 1 _! wbdata_x_d [4] $end
$var wire 1 `! wbdata_x_d [3] $end
$var wire 1 a! wbdata_x_d [2] $end
$var wire 1 b! wbdata_x_d [1] $end
$var wire 1 c! wbdata_x_d [0] $end
$var wire 1 d! nextPC_x_d [15] $end
$var wire 1 e! nextPC_x_d [14] $end
$var wire 1 f! nextPC_x_d [13] $end
$var wire 1 g! nextPC_x_d [12] $end
$var wire 1 h! nextPC_x_d [11] $end
$var wire 1 i! nextPC_x_d [10] $end
$var wire 1 j! nextPC_x_d [9] $end
$var wire 1 k! nextPC_x_d [8] $end
$var wire 1 l! nextPC_x_d [7] $end
$var wire 1 m! nextPC_x_d [6] $end
$var wire 1 n! nextPC_x_d [5] $end
$var wire 1 o! nextPC_x_d [4] $end
$var wire 1 p! nextPC_x_d [3] $end
$var wire 1 q! nextPC_x_d [2] $end
$var wire 1 r! nextPC_x_d [1] $end
$var wire 1 s! nextPC_x_d [0] $end
$var wire 1 t! pc_d_x [15] $end
$var wire 1 u! pc_d_x [14] $end
$var wire 1 v! pc_d_x [13] $end
$var wire 1 w! pc_d_x [12] $end
$var wire 1 x! pc_d_x [11] $end
$var wire 1 y! pc_d_x [10] $end
$var wire 1 z! pc_d_x [9] $end
$var wire 1 {! pc_d_x [8] $end
$var wire 1 |! pc_d_x [7] $end
$var wire 1 }! pc_d_x [6] $end
$var wire 1 ~! pc_d_x [5] $end
$var wire 1 !" pc_d_x [4] $end
$var wire 1 "" pc_d_x [3] $end
$var wire 1 #" pc_d_x [2] $end
$var wire 1 $" pc_d_x [1] $end
$var wire 1 %" pc_d_x [0] $end
$var wire 1 &" srca [15] $end
$var wire 1 '" srca [14] $end
$var wire 1 (" srca [13] $end
$var wire 1 )" srca [12] $end
$var wire 1 *" srca [11] $end
$var wire 1 +" srca [10] $end
$var wire 1 ," srca [9] $end
$var wire 1 -" srca [8] $end
$var wire 1 ." srca [7] $end
$var wire 1 /" srca [6] $end
$var wire 1 0" srca [5] $end
$var wire 1 1" srca [4] $end
$var wire 1 2" srca [3] $end
$var wire 1 3" srca [2] $end
$var wire 1 4" srca [1] $end
$var wire 1 5" srca [0] $end
$var wire 1 6" srcb [15] $end
$var wire 1 7" srcb [14] $end
$var wire 1 8" srcb [13] $end
$var wire 1 9" srcb [12] $end
$var wire 1 :" srcb [11] $end
$var wire 1 ;" srcb [10] $end
$var wire 1 <" srcb [9] $end
$var wire 1 =" srcb [8] $end
$var wire 1 >" srcb [7] $end
$var wire 1 ?" srcb [6] $end
$var wire 1 @" srcb [5] $end
$var wire 1 A" srcb [4] $end
$var wire 1 B" srcb [3] $end
$var wire 1 C" srcb [2] $end
$var wire 1 D" srcb [1] $end
$var wire 1 E" srcb [0] $end
$var wire 1 F" eightBits [15] $end
$var wire 1 G" eightBits [14] $end
$var wire 1 H" eightBits [13] $end
$var wire 1 I" eightBits [12] $end
$var wire 1 J" eightBits [11] $end
$var wire 1 K" eightBits [10] $end
$var wire 1 L" eightBits [9] $end
$var wire 1 M" eightBits [8] $end
$var wire 1 N" eightBits [7] $end
$var wire 1 O" eightBits [6] $end
$var wire 1 P" eightBits [5] $end
$var wire 1 Q" eightBits [4] $end
$var wire 1 R" eightBits [3] $end
$var wire 1 S" eightBits [2] $end
$var wire 1 T" eightBits [1] $end
$var wire 1 U" eightBits [0] $end
$var wire 1 V" elevenBits [15] $end
$var wire 1 W" elevenBits [14] $end
$var wire 1 X" elevenBits [13] $end
$var wire 1 Y" elevenBits [12] $end
$var wire 1 Z" elevenBits [11] $end
$var wire 1 [" elevenBits [10] $end
$var wire 1 \" elevenBits [9] $end
$var wire 1 ]" elevenBits [8] $end
$var wire 1 ^" elevenBits [7] $end
$var wire 1 _" elevenBits [6] $end
$var wire 1 `" elevenBits [5] $end
$var wire 1 a" elevenBits [4] $end
$var wire 1 b" elevenBits [3] $end
$var wire 1 c" elevenBits [2] $end
$var wire 1 d" elevenBits [1] $end
$var wire 1 e" elevenBits [0] $end
$var wire 1 f" instruct [1] $end
$var wire 1 g" instruct [0] $end
$var wire 1 h" regsrc [1] $end
$var wire 1 i" regsrc [0] $end
$var wire 1 j" err1 $end
$var wire 1 k" immsrc $end
$var wire 1 l" memwrt $end
$var wire 1 m" inva $end
$var wire 1 n" invb $end
$var wire 1 o" alujmp $end
$var wire 1 p" memread $end
$var wire 1 q" dmp $end
$var wire 1 r" aluopr [3] $end
$var wire 1 s" aluopr [2] $end
$var wire 1 t" aluopr [1] $end
$var wire 1 u" aluopr [0] $end
$var wire 1 v" branch [2] $end
$var wire 1 w" branch [1] $end
$var wire 1 x" branch [0] $end
$var wire 1 y" nextPC_m_x [15] $end
$var wire 1 z" nextPC_m_x [14] $end
$var wire 1 {" nextPC_m_x [13] $end
$var wire 1 |" nextPC_m_x [12] $end
$var wire 1 }" nextPC_m_x [11] $end
$var wire 1 ~" nextPC_m_x [10] $end
$var wire 1 !# nextPC_m_x [9] $end
$var wire 1 "# nextPC_m_x [8] $end
$var wire 1 ## nextPC_m_x [7] $end
$var wire 1 $# nextPC_m_x [6] $end
$var wire 1 %# nextPC_m_x [5] $end
$var wire 1 &# nextPC_m_x [4] $end
$var wire 1 '# nextPC_m_x [3] $end
$var wire 1 (# nextPC_m_x [2] $end
$var wire 1 )# nextPC_m_x [1] $end
$var wire 1 *# nextPC_m_x [0] $end
$var wire 1 +# wb_m_x [15] $end
$var wire 1 ,# wb_m_x [14] $end
$var wire 1 -# wb_m_x [13] $end
$var wire 1 .# wb_m_x [12] $end
$var wire 1 /# wb_m_x [11] $end
$var wire 1 0# wb_m_x [10] $end
$var wire 1 1# wb_m_x [9] $end
$var wire 1 2# wb_m_x [8] $end
$var wire 1 3# wb_m_x [7] $end
$var wire 1 4# wb_m_x [6] $end
$var wire 1 5# wb_m_x [5] $end
$var wire 1 6# wb_m_x [4] $end
$var wire 1 7# wb_m_x [3] $end
$var wire 1 8# wb_m_x [2] $end
$var wire 1 9# wb_m_x [1] $end
$var wire 1 :# wb_m_x [0] $end
$var wire 1 ;# pc_x_m [15] $end
$var wire 1 <# pc_x_m [14] $end
$var wire 1 =# pc_x_m [13] $end
$var wire 1 ># pc_x_m [12] $end
$var wire 1 ?# pc_x_m [11] $end
$var wire 1 @# pc_x_m [10] $end
$var wire 1 A# pc_x_m [9] $end
$var wire 1 B# pc_x_m [8] $end
$var wire 1 C# pc_x_m [7] $end
$var wire 1 D# pc_x_m [6] $end
$var wire 1 E# pc_x_m [5] $end
$var wire 1 F# pc_x_m [4] $end
$var wire 1 G# pc_x_m [3] $end
$var wire 1 H# pc_x_m [2] $end
$var wire 1 I# pc_x_m [1] $end
$var wire 1 J# pc_x_m [0] $end
$var wire 1 K# jmpSource [15] $end
$var wire 1 L# jmpSource [14] $end
$var wire 1 M# jmpSource [13] $end
$var wire 1 N# jmpSource [12] $end
$var wire 1 O# jmpSource [11] $end
$var wire 1 P# jmpSource [10] $end
$var wire 1 Q# jmpSource [9] $end
$var wire 1 R# jmpSource [8] $end
$var wire 1 S# jmpSource [7] $end
$var wire 1 T# jmpSource [6] $end
$var wire 1 U# jmpSource [5] $end
$var wire 1 V# jmpSource [4] $end
$var wire 1 W# jmpSource [3] $end
$var wire 1 X# jmpSource [2] $end
$var wire 1 Y# jmpSource [1] $end
$var wire 1 Z# jmpSource [0] $end
$var wire 1 [# alu_x_m [15] $end
$var wire 1 \# alu_x_m [14] $end
$var wire 1 ]# alu_x_m [13] $end
$var wire 1 ^# alu_x_m [12] $end
$var wire 1 _# alu_x_m [11] $end
$var wire 1 `# alu_x_m [10] $end
$var wire 1 a# alu_x_m [9] $end
$var wire 1 b# alu_x_m [8] $end
$var wire 1 c# alu_x_m [7] $end
$var wire 1 d# alu_x_m [6] $end
$var wire 1 e# alu_x_m [5] $end
$var wire 1 f# alu_x_m [4] $end
$var wire 1 g# alu_x_m [3] $end
$var wire 1 h# alu_x_m [2] $end
$var wire 1 i# alu_x_m [1] $end
$var wire 1 j# alu_x_m [0] $end
$var wire 1 k# srcb_out [15] $end
$var wire 1 l# srcb_out [14] $end
$var wire 1 m# srcb_out [13] $end
$var wire 1 n# srcb_out [12] $end
$var wire 1 o# srcb_out [11] $end
$var wire 1 p# srcb_out [10] $end
$var wire 1 q# srcb_out [9] $end
$var wire 1 r# srcb_out [8] $end
$var wire 1 s# srcb_out [7] $end
$var wire 1 t# srcb_out [6] $end
$var wire 1 u# srcb_out [5] $end
$var wire 1 v# srcb_out [4] $end
$var wire 1 w# srcb_out [3] $end
$var wire 1 x# srcb_out [2] $end
$var wire 1 y# srcb_out [1] $end
$var wire 1 z# srcb_out [0] $end
$var wire 1 {# regsrc_out [1] $end
$var wire 1 |# regsrc_out [0] $end
$var wire 1 }# setrd $end
$var wire 1 ~# alujmp_out $end
$var wire 1 !$ brchcnd $end
$var wire 1 "$ memwrt_out $end
$var wire 1 #$ memread_out $end
$var wire 1 $$ dmp_out $end
$var wire 1 %$ wb_w_m [15] $end
$var wire 1 &$ wb_w_m [14] $end
$var wire 1 '$ wb_w_m [13] $end
$var wire 1 ($ wb_w_m [12] $end
$var wire 1 )$ wb_w_m [11] $end
$var wire 1 *$ wb_w_m [10] $end
$var wire 1 +$ wb_w_m [9] $end
$var wire 1 ,$ wb_w_m [8] $end
$var wire 1 -$ wb_w_m [7] $end
$var wire 1 .$ wb_w_m [6] $end
$var wire 1 /$ wb_w_m [5] $end
$var wire 1 0$ wb_w_m [4] $end
$var wire 1 1$ wb_w_m [3] $end
$var wire 1 2$ wb_w_m [2] $end
$var wire 1 3$ wb_w_m [1] $end
$var wire 1 4$ wb_w_m [0] $end
$var wire 1 5$ mem_data [15] $end
$var wire 1 6$ mem_data [14] $end
$var wire 1 7$ mem_data [13] $end
$var wire 1 8$ mem_data [12] $end
$var wire 1 9$ mem_data [11] $end
$var wire 1 :$ mem_data [10] $end
$var wire 1 ;$ mem_data [9] $end
$var wire 1 <$ mem_data [8] $end
$var wire 1 =$ mem_data [7] $end
$var wire 1 >$ mem_data [6] $end
$var wire 1 ?$ mem_data [5] $end
$var wire 1 @$ mem_data [4] $end
$var wire 1 A$ mem_data [3] $end
$var wire 1 B$ mem_data [2] $end
$var wire 1 C$ mem_data [1] $end
$var wire 1 D$ mem_data [0] $end
$var wire 1 E$ PC_reg [15] $end
$var wire 1 F$ PC_reg [14] $end
$var wire 1 G$ PC_reg [13] $end
$var wire 1 H$ PC_reg [12] $end
$var wire 1 I$ PC_reg [11] $end
$var wire 1 J$ PC_reg [10] $end
$var wire 1 K$ PC_reg [9] $end
$var wire 1 L$ PC_reg [8] $end
$var wire 1 M$ PC_reg [7] $end
$var wire 1 N$ PC_reg [6] $end
$var wire 1 O$ PC_reg [5] $end
$var wire 1 P$ PC_reg [4] $end
$var wire 1 Q$ PC_reg [3] $end
$var wire 1 R$ PC_reg [2] $end
$var wire 1 S$ PC_reg [1] $end
$var wire 1 T$ PC_reg [0] $end
$var wire 1 U$ alu_out_m_w [15] $end
$var wire 1 V$ alu_out_m_w [14] $end
$var wire 1 W$ alu_out_m_w [13] $end
$var wire 1 X$ alu_out_m_w [12] $end
$var wire 1 Y$ alu_out_m_w [11] $end
$var wire 1 Z$ alu_out_m_w [10] $end
$var wire 1 [$ alu_out_m_w [9] $end
$var wire 1 \$ alu_out_m_w [8] $end
$var wire 1 ]$ alu_out_m_w [7] $end
$var wire 1 ^$ alu_out_m_w [6] $end
$var wire 1 _$ alu_out_m_w [5] $end
$var wire 1 `$ alu_out_m_w [4] $end
$var wire 1 a$ alu_out_m_w [3] $end
$var wire 1 b$ alu_out_m_w [2] $end
$var wire 1 c$ alu_out_m_w [1] $end
$var wire 1 d$ alu_out_m_w [0] $end
$var wire 1 e$ setrd_out $end
$var wire 1 f$ regsrc2 [1] $end
$var wire 1 g$ regsrc2 [0] $end

$scope module f $end
$var wire 1 D! pc [15] $end
$var wire 1 E! pc [14] $end
$var wire 1 F! pc [13] $end
$var wire 1 G! pc [12] $end
$var wire 1 H! pc [11] $end
$var wire 1 I! pc [10] $end
$var wire 1 J! pc [9] $end
$var wire 1 K! pc [8] $end
$var wire 1 L! pc [7] $end
$var wire 1 M! pc [6] $end
$var wire 1 N! pc [5] $end
$var wire 1 O! pc [4] $end
$var wire 1 P! pc [3] $end
$var wire 1 Q! pc [2] $end
$var wire 1 R! pc [1] $end
$var wire 1 S! pc [0] $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var wire 1 $! instruction [15] $end
$var wire 1 %! instruction [14] $end
$var wire 1 &! instruction [13] $end
$var wire 1 '! instruction [12] $end
$var wire 1 (! instruction [11] $end
$var wire 1 )! instruction [10] $end
$var wire 1 *! instruction [9] $end
$var wire 1 +! instruction [8] $end
$var wire 1 ,! instruction [7] $end
$var wire 1 -! instruction [6] $end
$var wire 1 .! instruction [5] $end
$var wire 1 /! instruction [4] $end
$var wire 1 0! instruction [3] $end
$var wire 1 1! instruction [2] $end
$var wire 1 2! instruction [1] $end
$var wire 1 3! instruction [0] $end
$var wire 1 4! branch_pc [15] $end
$var wire 1 5! branch_pc [14] $end
$var wire 1 6! branch_pc [13] $end
$var wire 1 7! branch_pc [12] $end
$var wire 1 8! branch_pc [11] $end
$var wire 1 9! branch_pc [10] $end
$var wire 1 :! branch_pc [9] $end
$var wire 1 ;! branch_pc [8] $end
$var wire 1 <! branch_pc [7] $end
$var wire 1 =! branch_pc [6] $end
$var wire 1 >! branch_pc [5] $end
$var wire 1 ?! branch_pc [4] $end
$var wire 1 @! branch_pc [3] $end
$var wire 1 A! branch_pc [2] $end
$var wire 1 B! branch_pc [1] $end
$var wire 1 C! branch_pc [0] $end
$var wire 1 h$ pc_out [15] $end
$var wire 1 i$ pc_out [14] $end
$var wire 1 j$ pc_out [13] $end
$var wire 1 k$ pc_out [12] $end
$var wire 1 l$ pc_out [11] $end
$var wire 1 m$ pc_out [10] $end
$var wire 1 n$ pc_out [9] $end
$var wire 1 o$ pc_out [8] $end
$var wire 1 p$ pc_out [7] $end
$var wire 1 q$ pc_out [6] $end
$var wire 1 r$ pc_out [5] $end
$var wire 1 s$ pc_out [4] $end
$var wire 1 t$ pc_out [3] $end
$var wire 1 u$ pc_out [2] $end
$var wire 1 v$ pc_out [1] $end
$var wire 1 w$ pc_out [0] $end

$scope module pc1 $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var wire 1 D! pc_in [15] $end
$var wire 1 E! pc_in [14] $end
$var wire 1 F! pc_in [13] $end
$var wire 1 G! pc_in [12] $end
$var wire 1 H! pc_in [11] $end
$var wire 1 I! pc_in [10] $end
$var wire 1 J! pc_in [9] $end
$var wire 1 K! pc_in [8] $end
$var wire 1 L! pc_in [7] $end
$var wire 1 M! pc_in [6] $end
$var wire 1 N! pc_in [5] $end
$var wire 1 O! pc_in [4] $end
$var wire 1 P! pc_in [3] $end
$var wire 1 Q! pc_in [2] $end
$var wire 1 R! pc_in [1] $end
$var wire 1 S! pc_in [0] $end
$var wire 1 h$ pc_out [15] $end
$var wire 1 i$ pc_out [14] $end
$var wire 1 j$ pc_out [13] $end
$var wire 1 k$ pc_out [12] $end
$var wire 1 l$ pc_out [11] $end
$var wire 1 m$ pc_out [10] $end
$var wire 1 n$ pc_out [9] $end
$var wire 1 o$ pc_out [8] $end
$var wire 1 p$ pc_out [7] $end
$var wire 1 q$ pc_out [6] $end
$var wire 1 r$ pc_out [5] $end
$var wire 1 s$ pc_out [4] $end
$var wire 1 t$ pc_out [3] $end
$var wire 1 u$ pc_out [2] $end
$var wire 1 v$ pc_out [1] $end
$var wire 1 w$ pc_out [0] $end

$scope module dff1[15] $end
$var wire 1 h$ q $end
$var wire 1 D! d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 x$ state $end
$upscope $end

$scope module dff1[14] $end
$var wire 1 i$ q $end
$var wire 1 E! d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 y$ state $end
$upscope $end

$scope module dff1[13] $end
$var wire 1 j$ q $end
$var wire 1 F! d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 z$ state $end
$upscope $end

$scope module dff1[12] $end
$var wire 1 k$ q $end
$var wire 1 G! d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 {$ state $end
$upscope $end

$scope module dff1[11] $end
$var wire 1 l$ q $end
$var wire 1 H! d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 |$ state $end
$upscope $end

$scope module dff1[10] $end
$var wire 1 m$ q $end
$var wire 1 I! d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 }$ state $end
$upscope $end

$scope module dff1[9] $end
$var wire 1 n$ q $end
$var wire 1 J! d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 ~$ state $end
$upscope $end

$scope module dff1[8] $end
$var wire 1 o$ q $end
$var wire 1 K! d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 !% state $end
$upscope $end

$scope module dff1[7] $end
$var wire 1 p$ q $end
$var wire 1 L! d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 "% state $end
$upscope $end

$scope module dff1[6] $end
$var wire 1 q$ q $end
$var wire 1 M! d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 #% state $end
$upscope $end

$scope module dff1[5] $end
$var wire 1 r$ q $end
$var wire 1 N! d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 $% state $end
$upscope $end

$scope module dff1[4] $end
$var wire 1 s$ q $end
$var wire 1 O! d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 %% state $end
$upscope $end

$scope module dff1[3] $end
$var wire 1 t$ q $end
$var wire 1 P! d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 &% state $end
$upscope $end

$scope module dff1[2] $end
$var wire 1 u$ q $end
$var wire 1 Q! d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 '% state $end
$upscope $end

$scope module dff1[1] $end
$var wire 1 v$ q $end
$var wire 1 R! d $end
$var wire 1 { clk $end
$var wire 1 } rst $end
$var reg 1 (% state $end
$upscope $end

$scope module dff1[0] $end
$var wire 1 w$ q $end
$var wire 1 S! d $end
$var wire 1 { clk $end
$var wire 